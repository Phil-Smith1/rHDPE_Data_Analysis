% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/asynchronous_auth.R
\name{.AsyncAuth}
\alias{.AsyncAuth}
\title{Asynchronous form of auth}
\value{
Response from polling for access token.
If successful, contains elements:
`token_type`: str -- always "Bearer"
`scope`: space separated strings -- list of scopes the access token is valid for.
`expires_in`: int -- number of seconds the access token is valid for.
`access_token`: str -- the access token.
}
\description{
Asynchronous form of auth

Asynchronous form of auth
}
\details{
Use when need return to complete after user has completed the auth flow.
}
\section{Super class}{
\code{\link[datalabSDK:BaseAuth]{datalabSDK::BaseAuth}} -> \code{AsyncAuth}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{.AsyncAuth$new()}}
\item \href{#method-start_auth_flow}{\code{.AsyncAuth$start_auth_flow()}}
\item \href{#method-complete_auth_flow}{\code{.AsyncAuth$complete_auth_flow()}}
\item \href{#method-clone}{\code{.AsyncAuth$clone()}}
}
}
\if{html}{
\out{<details open ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="datalabSDK" data-topic="BaseAuth" data-id=".is_in_time">}\href{../../datalabSDK/html/BaseAuth.html#method-.is_in_time}{\code{datalabSDK::BaseAuth$.is_in_time()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="datalabSDK" data-topic="BaseAuth" data-id="is_valid">}\href{../../datalabSDK/html/BaseAuth.html#method-is_valid}{\code{datalabSDK::BaseAuth$is_valid()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialise an instance of AsyncAuth
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.AsyncAuth$new(environment)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{environment}}{The environment.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new AsyncAuth object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start_auth_flow"></a>}}
\if{latex}{\out{\hypertarget{method-start_auth_flow}{}}}
\subsection{Method \code{start_auth_flow()}}{
Start device flow
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.AsyncAuth$start_auth_flow()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Response from initiating device flow with elements:
`device_code`: str -- used to verify session between client and authorisation server.
`user_code`: str -- used to identify session on secondary device.
`verification_uri`: URI -- the URI the user should go to with the `user_code` to sign in.
`expires_in`: int -- number of seconds before the `device_code` and `user_code` expire.
`interval`: int - the number of seconds the client should wait between polling requests.
`message`: str -- instructions for the user.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-complete_auth_flow"></a>}}
\if{latex}{\out{\hypertarget{method-complete_auth_flow}{}}}
\subsection{Method \code{complete_auth_flow()}}{
Get a token from completed device flow
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.AsyncAuth$complete_auth_flow(flow)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{flow}}{The response from `start_auth_flow()`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{.AsyncAuth$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
